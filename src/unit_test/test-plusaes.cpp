#include "gtest/gtest.h"
#include "plusaes/plusaes.hpp"

using namespace plusaes::detail;

TEST(AES, sbox) {
    for (int i = 0; i < 256; ++i) {
        const unsigned char v = kSbox[i];
        ASSERT_EQ(i, kInvSbox[v]);
    }
}

TEST(AES, rot_word) {
    ASSERT_EQ(rot_word(0x3c4fcf09), 0x093c4fcf);
    ASSERT_EQ(rot_word(0x05766c2a), 0x2a05766c);
    ASSERT_EQ(rot_word(0x7ff65973), 0x737ff659);
}

TEST(AES, sub_word) {
    ASSERT_EQ(sub_word(0x093c4fcf), 0x01eb848a);
    ASSERT_EQ(sub_word(0x2a05766c), 0xe56b3850);
    ASSERT_EQ(sub_word(0x737ff659), 0x8fd242cb);
}

TEST(AES, expand_key_128) {
    const unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
    const unsigned char ok_keys[11][16] = {
        {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c},
        {0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05},
        {0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73, 0x59, 0xf6, 0x7f},
        {0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a, 0x88, 0x3b},
        {0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b, 0xad, 0x00},
        {0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9, 0x15, 0xbc},
        {0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00, 0x93, 0xfd},
        {0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3, 0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6, 0xdc, 0x4f},
        {0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d, 0x29, 0x2f},
        {0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c, 0x00, 0x6e},
        {0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63, 0x0c, 0xa6}
    };

    RoundKeys keys = expand_key(key, sizeof(key));

    ASSERT_EQ(keys.size(), 11);
    for (int i = 0; i < 11; ++i) {
        ASSERT_EQ(memcmp(keys[i].s, ok_keys[i], sizeof(key)), 0);
    }
}

TEST(AES, encrypt128) {
    const unsigned char data[] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
    const int data_size = sizeof(data);
    const unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};

    unsigned char encrypted[data_size] = {};
    plusaes::encrypt(data, sizeof(data), key, sizeof(key), plusaes::MODE_ECB, encrypted);

    unsigned char decrypted[data_size] = {};
    plusaes::decrypt(encrypted, sizeof(encrypted), key, sizeof(key), plusaes::MODE_ECB, decrypted);

    ASSERT_NE(memcmp(encrypted, decrypted, data_size), 0);
    ASSERT_EQ(memcmp(data, decrypted, data_size), 0);
}
